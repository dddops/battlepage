import jwt
from django.conf import settings
from django.contrib.auth.hashers import check_password
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
from .models import User
from django.contrib.auth.hashers import make_password

@csrf_exempt
def signup_view(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            username = data.get('username')
            password = data.get('password')

            if not username or not password:
                return JsonResponse({'status': 'error', 'message': '아이디와 비밀번호를 모두 입력해주세요.'}, status=400)

            if User.objects.filter(username=username).exists():
                return JsonResponse({'status': 'error', 'message': '이미 존재하는 아이디입니다.'}, status=409)

            # 실제 서비스에서는 비밀번호를 반드시 암호화해야 합니다. 지금은 임시로 그대로 저장합니다.
            hashed_password = make_password(password)
            user = User(username=username, password=password)
            user.save()

            return JsonResponse({'status': 'success', 'message': '회원가입이 완료되었습니다.'}, status=201)
        except json.JSONDecodeError:
            return JsonResponse({'status': 'error', 'message': '잘못된 요청 형식입니다.'}, status=400)

    return JsonResponse({'status': 'error', 'message': 'POST 요청만 가능합니다.'}, status=405)
@csrf_exempt
def login_view(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            username = data.get('username')
            password = data.get('password')

            if not username or not password:
                return JsonResponse({'status': 'error', 'message': '아이디와 비밀번호를 모두 입력해주세요.'}, status=400)

            # 데이터베이스에서 사용자 찾기
            try:
                user = User.objects.get(username=username)
            except User.DoesNotExist:
                return JsonResponse({'status': 'error', 'message': '존재하지 않는 아이디입니다.'}, status=404)

            # 암호화된 비밀번호와 입력된 비밀번호 비교
            if not check_password(password, user.password):
                return JsonResponse({'status': 'error', 'message': '비밀번호가 일치하지 않습니다.'}, status=401)

            # 비밀번호가 일치하면, '특별 입장권(JWT)' 생성
            # SECRET_KEY는 settings.py에 정의되어 있습니다.
            token = jwt.encode({'user_id': user.id}, settings.SECRET_KEY, algorithm='HS256')

            return JsonResponse({'status': 'success', 'token': token}, status=200)

        except json.JSONDecodeError:
            return JsonResponse({'status': 'error', 'message': '잘못된 요청 형식입니다.'}, status=400)

    return JsonResponse({'status': 'error', 'message': 'POST 요청만 가능합니다.'}, status=405)